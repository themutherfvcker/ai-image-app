/* eslint-disable @next/next/no-img-element */
"use client"

import { useEffect, useRef, useState } from "react"
import Script from "next/script"
import { supabase } from "../supabaseClient"
import SignInModal from "../SignInModal"
import PlansModal from "../app/components/PlansModal"


// ---- Generator constants ----
const STYLE_CHIPS = [
  { label: "Photorealistic", text: "ultra realistic, natural lighting, 50mm lens, high detail" },
  { label: "Cinematic", text: "cinematic lighting, volumetric, dramatic shadows, 35mm film look" },
  { label: "Studio Portrait", text: "studio portrait, softbox lighting, sharp eyes, skin texture" },
  { label: "Fashion Editorial", text: "editorial fashion, clean backdrop, professional styling" },
  { label: "Moody", text: "moody, low-key lighting, high contrast, grain" },
  { label: "Vibrant", text: "vibrant colors, crisp detail, punchy contrast" },
]

const ASPECTS = [
  { k: "1:1",  w: 1024, h: 1024 },
  { k: "3:4",  w: 960,  h: 1280 },
  { k: "4:3",  w: 1280, h: 960  },
  { k: "16:9", w: 1536, h: 864  },
  { k: "9:16", w: 864,  h: 1536 },
]

// ---- Inline Generator section used on the homepage ----
function HomeGeneratorSection() {
  const [balance, setBalance] = useState(null)
  const [activeTab, setActiveTab] = useState("text") // "text" | "image"

  // Inputs
  const [prompt, setPrompt] = useState("a cinematic banana astronaut on the moon, 35mm film look")
  const [aspect, setAspect] = useState("1:1")
  const [strength, setStrength] = useState(0.6) // image→image only

  // UI state
  const [busy, setBusy] = useState(false)
  const [error, setError] = useState("")
  const [resultUrl, setResultUrl] = useState("")
  const [history, setHistory] = useState([])
  const [user, setUser] = useState(null)
  const [showSignIn, setShowSignIn] = useState(false)
  const [showPlans, setShowPlans] = useState(false) // ← NEW

  // Upload state
  const [previewUrl, setPreviewUrl] = useState(null)
  const [dragActive, setDragActive] = useState(false)
  const fileInputRef = useRef(null)
  const dropRef = useRef(null)

  // Load AOS CSS (via CDN) once
  useEffect(() => {
    const AOS_HREF = "https://unpkg.com/aos@2.3.1/dist/aos.css"
    if (!document.querySelector(`link[href="${AOS_HREF}"]`)) {
      const link = document.createElement("link")
      link.rel = "stylesheet"
      link.href = AOS_HREF
      document.head.appendChild(link)
    }
  }, [])

  // Init AOS when things change
  useEffect(() => {
    if (window.AOS) window.AOS.init({ duration: 600, easing: "ease-out", once: true })
  }, [resultUrl, history, activeTab])

  // Credits (with auth token) + auth listener
  useEffect(() => {
    // on mount, get any existing session and fetch balance
    supabase.auth.getSession().then(async ({ data }) => {
      const session = data.session
      setUser(session?.user ?? null)
      if (session?.access_token) {
        try {
          const r = await fetch("/api/session", {
            headers: { Authorization: `Bearer ${session.access_token}` },
            cache: "no-store",
          })
          const j = await r.json()
          if (typeof j?.balance === "number") setBalance(j.balance)
        } catch {}
      }
    })

    // react to sign-in/sign-out
    const { data: { subscription } } = supabase.auth.onAuthStateChange(async (_event, session) => {
      setUser(session?.user ?? null)
      if (session?.access_token) {
        try {
          const r = await fetch("/api/session", {
            headers: { Authorization: `Bearer ${session.access_token}` },
            cache: "no-store",
          })
          const j = await r.json()
          if (typeof j?.balance === "number") setBalance(j.balance)
        } catch {}
        setShowSignIn(false)
      } else {
        setBalance(null)
      }
    })
    return () => subscription.unsubscribe()
  }, [])

  // Clean up preview blob
  useEffect(() => () => { if (previewUrl) URL.revokeObjectURL(previewUrl) }, [previewUrl])

  function setPreviewFile(file) {
    if (previewUrl) URL.revokeObjectURL(previewUrl)
    const url = URL.createObjectURL(file)
    setPreviewUrl(url)
  }
  function clearPreview() {
    if (previewUrl) URL.revokeObjectURL(previewUrl)
    setPreviewUrl(null)
    if (fileInputRef.current) fileInputRef.current.value = ""
  }

  // Drag & drop
  useEffect(() => {
    if (activeTab !== "image") return
    const el = dropRef.current
    if (!el) return
    const onDrag = (e) => {
      e.preventDefault(); e.stopPropagation()
      if (e.type === "dragenter" || e.type === "dragover") setDragActive(true)
      else if (e.type === "dragleave") setDragActive(false)
    }
    const onDrop = (e) => {
      e.preventDefault(); e.stopPropagation(); setDragActive(false)
      const f = e.dataTransfer?.files?.[0]; if (f) setPreviewFile(f)
    }
    el.addEventListener("dragenter", onDrag)
    el.addEventListener("dragover", onDrag)
    el.addEventListener("dragleave", onDrag)
    el.addEventListener("drop", onDrop)
    return () => {
      el.removeEventListener("dragenter", onDrag)
      el.removeEventListener("dragover", onDrag)
      el.removeEventListener("dragleave", onDrag)
      el.removeEventListener("drop", onDrop)
    }
  }, [activeTab, previewUrl])

  function applyChip(chipText) {
    if (!prompt || prompt === "a cinematic banana astronaut on the moon, 35mm film look") {
      setPrompt(chipText)
    } else {
      setPrompt(prev => `${prev.trim().replace(/\.$/, "")}. ${chipText}`)
    }
  }

  // Convert file → compressed DataURL (keeps JSON simple)
  async function fileToDataUrlCompressed(file, _maxDim = 1536, jpegQuality = 0.9) {
    const okTypes = ["image/jpeg", "image/png", "image/webp"]
    if (!okTypes.includes(file.type)) throw new Error("Please upload PNG, JPG, or WEBP.")
    if (file.size > 10 * 1024 * 1024) throw new Error("Image is too large. Keep under ~10MB.")

    const blobUrl = URL.createObjectURL(file)
    const img = await new Promise((resolve, reject) => {
      const i = new Image()
      i.onload = () => resolve(i)
      i.onerror = () => reject(new Error("Could not read image"))
      i.src = blobUrl
    })
    const w = img.naturalWidth || img.width
    const h = img.naturalHeight || img.height
    const target = ASPECTS.find(a => a.k === aspect) || ASPECTS[0]
    const maxTarget = Math.max(target.w, target.h)
    const scale = Math.min(1, maxTarget / Math.max(w, h))
    const outW = Math.max(1, Math.round(w * scale))
    const outH = Math.max(1, Math.round(h * scale))

    const cvs = document.createElement("canvas")
    cvs.width = outW
    cvs.height = outH
    const ctx = cvs.getContext("2d")
    ctx.drawImage(img, 0, 0, outW, outH)
    const dataUrl = cvs.toDataURL("image/jpeg", jpegQuality)
    URL.revokeObjectURL(blobUrl)

    const approxBytes = Math.ceil((dataUrl.length - "data:image/jpeg;base64,".length) * 3 / 4)
    if (approxBytes > 5 * 1024 * 1024) {
      throw new Error("Compressed image still too big. Try a smaller image.")
    }
    return dataUrl
  }

  // Robust JSON reader (prevents “Unexpected end of JSON input”)
  async function safeReadJson(resp) {
    const raw = await resp.text()
    if (!raw) {
      if (!resp.ok) throw new Error(`HTTP ${resp.status} ${resp.statusText} (empty body)`)
      throw new Error("Empty response from server")
    }
    try {
      return JSON.parse(raw)
    } catch {
      const preview = raw.slice(0, 300).replace(/\s+/g, " ")
      throw new Error(`Non-JSON from server (status ${resp.status}). Preview: ${preview}`)
    }
  }

  async function onGenerate() {
    setBusy(true)
    setError("")
    setResultUrl("")
    try {
      // require sign-in
      const { data: { session } } = await supabase.auth.getSession()
      if (!session) {
        setShowSignIn(true)
        throw new Error("Please sign in to continue")
      }

      if (!prompt.trim()) throw new Error("Please enter a prompt.")

      const meta = { aspect, strength }
      let resp
      const headers = { "Content-Type": "application/json", Authorization: `Bearer ${session.access_token}` }

      if (activeTab === "image") {
        const file = fileInputRef.current?.files?.[0] || null
        if (!file) throw new Error("Please upload a reference image.")
        const imageDataUrl = await fileToDataUrlCompressed(file, 1536, 0.9)

        resp = await fetch("/api/vertex/edit", {
          method: "POST",
          headers,
          body: JSON.stringify({ prompt: prompt.trim(), imageDataUrl, meta }),
          cache: "no-store",
        })
      } else {
        resp = await fetch("/api/vertex/imagine", {
          method: "POST",
          headers,
          body: JSON.stringify({ prompt: prompt.trim(), meta }),
          cache: "no-store",
        })
      }

      // handle auth/paywall responses
      if (resp.status === 401) { setShowSignIn(true); throw new Error("Sign in required") }
      if (resp.status === 402) { setShowPlans(true); throw new Error("You’re out of credits — pick a plan") } // ← NEW

      const j = await safeReadJson(resp)
      if (!resp.ok || !j?.ok) throw new Error(j?.error || `HTTP ${resp.status}`)

      setResultUrl(j.dataUrl || "")
      setBalance(typeof j.balance === "number" ? j.balance : balance)
      setHistory(h => [{ url: j.dataUrl, at: Date.now(), prompt, mode: activeTab, aspect }, ...h].slice(0, 40))
    } catch (e) {
      setError(e?.message || "Generation failed")
    } finally {
      setBusy(false)
    }
  }

  const aspectHelp = "Aspect ratio hint (client-side). Your API may ignore it unless implemented server-side."

  return (
    <section id="generator" className="py-12 bg-gray-50" data-aos="fade-up">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div className="lg:text-center">
          <h2 className="text-base text-yellow-600 font-semibold tracking-wide uppercase">AI Image Editor</h2>
          <p className="mt-2 text-3xl leading-8 font-extrabold tracking-tight text-gray-900 sm:text-4xl">
            Try The AI Editor
          </p>
          <p className="mt-4 max-w-2xl text-xl text-gray-500 lg:mx-auto">
            Experience the power of nano-banana's natural language image editing. Credits:{" "}
            <span>{balance ?? "—"}</span>
          </p>
        </div>

        <div className="mt-10 grid grid-cols-1 gap-8 lg:grid-cols-12">
          {/* Left: controls */}
          <div className="bg-white overflow-hidden shadow rounded-lg lg:col-span-4">
            <div className="px-4 py-5 sm:p-6 space-y-5">
              {/* Tabs */}
              <div className="flex rounded-lg overflow-hidden border">
                <button
                  className={`flex-1 px-3 py-2 text-sm font-medium ${activeTab === "text" ? "bg-yellow-600 text-white" : "bg-white text-gray-700 hover:bg-gray-50"}`}
                  onClick={() => setActiveTab("text")}
                >
                  Text → Image
                </button>
                <button
                  className={`flex-1 px-3 py-2 text-sm font-medium ${activeTab === "image" ? "bg-yellow-600 text-white" : "bg-white text-gray-700 hover:bg-gray-50"}`}
                  onClick={() => setActiveTab("image")}
                >
                  Image → Image
                </button>
              </div>

              {/* Quick styles */}
              <div>
                <div className="flex items-center justify-between mb-2">
                  <h3 className="text-sm font-semibold text-gray-900">Styles</h3>
                  <button className="text-xs text-gray-500 hover:text-gray-700" onClick={() => setPrompt("")}>
                    Clear prompt
                  </button>
                </div>
                <div className="flex flex-wrap gap-2">
                  {STYLE_CHIPS.map((c) => (
                    <button
                      key={c.label}
                      type="button"
                      className="px-3 py-1.5 rounded-full text-xs font-medium border hover:bg-gray-50"
                      onClick={() => applyChip(c.text)}
                      title={c.text}
                    >
                      {c.label}
                    </button>
                  ))}
                </div>
              </div>

              {/* Aspect + strength */}
              <div className="grid grid-cols-2 gap-3">
                <div>
                  <label className="block text-sm font-medium text-gray-700">Aspect Ratio</label>
                  <select
                    value={aspect}
                    onChange={(e) => setAspect(e.target.value)}
                    className="mt-1 w-full rounded-md border-gray-300 focus:ring-yellow-500 focus:border-yellow-500"
                    title={aspectHelp}
                  >
                    {ASPECTS.map((a) => (
                      <option key={a.k} value={a.k}>{a.k}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="block text-sm font-medium text-gray-700">
                    Edit Strength {activeTab === "image" ? `(${strength.toFixed(2)})` : ""}
                  </label>
                  <input
                    type="range"
                    className="mt-2 w-full"
                    min={0} max={1} step={0.05}
                    disabled={activeTab !== "image"}
                    value={strength}
                    onChange={(e) => setStrength(parseFloat(e.target.value))}
                    title="Lower = follow image more. Higher = follow prompt more."
                  />
                </div>
              </div>

              {/* Upload (image→image) */}
              {activeTab === "image" && (
                <div>
                  <div className="flex items-center justify-between">
                    <h2 className="text-base font-semibold text-gray-900">Reference Image</h2>
                    <button className="text-xs text-gray-500 hover:text-gray-700" onClick={clearPreview}>Clear</button>
                  </div>

                  <div
                    ref={dropRef}
                    className={[
                      "rounded-md border-2 border-dashed",
                      dragActive ? "border-yellow-500 bg-yellow-50" : "border-gray-300 bg-gray-50"
                    ].join(" ")}
                  >
                    <label htmlFor="file-input" className="cursor-pointer block">
                      <div className="px-6 py-6 text-center">
                        {previewUrl ? (
                          <img src={previewUrl} alt="Preview" className="mx-auto max-h-48 rounded-md border" />
                        ) : null}
                        <div className="text-sm text-gray-600 mt-2">
                          <span className="font-medium text-yellow-700 hover:text-yellow-800">Click to upload</span> or drag and drop
                        </div>
                        <p className="text-xs text-gray-500 mt-1">PNG, JPG, WEBP up to ~10MB</p>
                      </div>
                    </label>
                    <input
                      id="file-input"
                      ref={fileInputRef}
                      type="file"
                      accept="image/png,image/jpeg,image/webp"
                      className="sr-only"
                      onChange={(e) => {
                        const f = e.target.files?.[0]
                        if (f) setPreviewFile(f)
                      }}
                    />
                  </div>
                </div>
              )}

              {/* Prompt */}
              <div>
                <label htmlFor="prompt" className="block text-sm font-medium text-gray-700">
                  Prompt
                </label>
                <textarea
                  id="prompt"
                  value={prompt}
                  onChange={(e) => setPrompt(e.target.value)}
                  rows={5}
                  className="mt-1 w-full rounded-md border-gray-300 focus:ring-yellow-500 focus:border-yellow-500"
                  placeholder={activeTab === "image" ? "Describe the edits you want to apply…" : "Describe the image you want to generate…"}
                />
              </div>

              <button
                onClick={onGenerate}
                disabled={busy}
                className="w-full inline-flex items-center justify-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-yellow-600 hover:bg-yellow-700 disabled:opacity-60"
              >
                {busy ? "Generating…" : activeTab === "image" ? "Apply Edits (−1 credit)" : "Generate (−1 credit)"}
              </button>

              {error && <div className="text-sm text-red-600">{error}</div>}

              <p className="text-xs text-gray-500">
                Aspect & strength are hints. Your API can read them from <code>meta</code> if implemented.
              </p>
            </div>
          </div>

          {/* Right: result & history */}
          <div className="lg:col-span-8 space-y-6">
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                <div className="flex items-center justify-between mb-3">
                  <h2 className="text-base font-semibold text-gray-900">Result</h2>
                  {resultUrl && (
                    <div className="flex gap-3">
                      <a
                        href={resultUrl}
                        download="nanobanana.png"
                        className="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md bg-gray-900 text-white hover:bg-black"
                      >
                        Download PNG
                      </a>
                      <button
                        className="inline-flex items-center px-3 py-2 text-sm font-medium rounded-md border border-gray-300 hover:bg-gray-50"
                        onClick={() => setResultUrl("")}
                      >
                        Clear
                      </button>
                    </div>
                  )}
                </div>

                {!resultUrl && (
                  <div className="h-72 border rounded-md grid place-items-center text-gray-500">
                    {busy ? (
                      <div className="flex items-center gap-3">
                        <svg className="animate-spin h-6 w-6" viewBox="0 0 24 24" fill="none" stroke="currentColor">
                          <circle cx="12" cy="12" r="10" strokeWidth="4" className="opacity-25"></circle>
                          <path d="M4 12a8 8 0 018-8" strokeWidth="4" className="opacity-75"></path>
                        </svg>
                        <span>Generating…</span>
                      </div>
                    ) : (
                      <span>Generated image will appear here</span>
                    )}
                  </div>
                )}

                {resultUrl && (
                  <div className="space-y-3" data-aos="fade-in">
                    <img src={resultUrl} alt="Result" className="w-full h-auto rounded-md border" />
                  </div>
                )}
              </div>
            </div>

            {/* Local history */}
            <div className="bg-white overflow-hidden shadow rounded-lg">
              <div className="px-4 py-5 sm:p-6">
                <div className="flex items-center justify-between mb-3">
                  <h2 className="text-base font-semibold text-gray-900">History (local)</h2>
                  {history.length > 0 && (
                    <button onClick={() => setHistory([])} className="text-xs text-gray-500 hover:text-gray-700">
                      Clear all
                    </button>
                  )}
                </div>
                {history.length === 0 ? (
                  <p className="text-sm text-gray-500">No history yet.</p>
                ) : (
                  <div className="grid grid-cols-2 sm:grid-cols-3 lg:grid-cols-4 gap-3">
                    {history.map((h, i) => (
                      <button
                        key={i}
                        className="group border rounded-md overflow-hidden text-left"
                        onClick={() => setResultUrl(h.url)}
                        title={`${h.mode === "image" ? "Image→Image" : "Text→Image"} • ${h.aspect} • ${h.prompt}`}
                      >
                        <img src={h.url} alt="" className="w-full h-32 object-cover group-hover:opacity-90" />
                        <div className="p-2 text-[11px] text-gray-600 line-clamp-2">
                          <span className="mr-1 inline-block px-1.5 py-0.5 rounded bg-gray-100 text-gray-700">
                            {h.mode === "image" ? "I→I" : "T→I"}
                          </span>
                          <span className="mr-1 inline-block px-1.5 py-0.5 rounded bg-gray-100 text-gray-700">
                            {h.aspect}
                          </span>
                          {h.prompt}
                        </div>
                      </button>
                    ))}
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* ✅ Modals */}
      <SignInModal open={showSignIn} onClose={() => setShowSignIn(false)} />
      <PlansModal  open={showPlans}  onClose={() => setShowPlans(false)} />   {/* ← NEW */}
    </section>
  )
}

export default function HomePage() {
  useEffect(() => {
    // Ensure AOS CSS present
    const AOS_HREF = "https://unpkg.com/aos@2.3.1/dist/aos.css"
    if (!document.querySelector(`link[href="${AOS_HREF}"]`)) {
      const link = document.createElement("link")
      link.rel = "stylesheet"
      link.href = AOS_HREF
      document.head.appendChild(link)
    }

    // Init external libs when ready (needs THREE first)
    const initLibs = () => {
      try {
        if (window.AOS) window.AOS.init({ duration: 800, easing: "ease-in-out", once: true })
        if (window.feather) window.feather.replace()
        if (window.VANTA && window.THREE && !window._vanta) {
          window._vanta = window.VANTA.GLOBE({
            el: "#home",
            THREE: window.THREE,
            mouseControls: true,
            touchControls: true,
            gyroControls: false,
            minHeight: 200.0,
            minWidth: 200.0,
            scale: 1.0,
            scaleMobile: 1.0,
            color: 0xffc107,
            backgroundColor: 0xf6d365,
            size: 0.8,
          })
        }
      } catch {}
    }

    const libTimer = setInterval(() => {
      if (window.THREE && window.VANTA && window.AOS && window.feather) {
        clearInterval(libTimer)
        initLibs()
      }
    }, 200)

    return () => {
      clearInterval(libTimer)
      if (window._vanta && window._vanta.destroy) {
        window._vanta.destroy()
        window._vanta = null
      }
    }
  }, [])

  return (
    <>
      {/* Tailwind via CDN */}
      <Script src="https://cdn.tailwindcss.com" strategy="afterInteractive" />

      {/* THREE before Vanta */}
      <Script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r134/three.min.js" strategy="afterInteractive" />
      <Script src="https://cdn.jsdelivr.net/npm/vanta@latest/dist/vanta.globe.min.js" strategy="afterInteractive" />
      <Script src="https://unpkg.com/aos@2.3.1/dist/aos.js" strategy="afterInteractive" />
      <Script src="https://cdn.jsdelivr.net/npm/feather-icons/dist/feather.min.js" strategy="afterInteractive" />

      {/* --- NAV + HERO (unchanged) --- */}
      {/* ... rest of your homepage content remains the same ... */}

      {/* Inline generator */}
      <HomeGeneratorSection />

      {/* The rest of the sections (features/showcase/reviews/faq/footer) … unchanged */}
      {/* (Keep your previous content below; omitted here for brevity if you’re pasting diffs.) */}
    </>
  )
}
